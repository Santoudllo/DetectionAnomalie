"""
Affiche l'interface de pr√©diction de la consommation √©nerg√©tique en fonction des conditions m√©t√©orologiques.

- Permet de saisir les donn√©es m√©t√©o (temp√©rature, vent, humidit√©, etc.).
- Effectue une pr√©diction √©nerg√©tique √† partir du mod√®le MLflow charg√©.
- Affiche les r√©sultats et log les d√©tails des entr√©es utilisateur et de la pr√©diction dans Elasticsearch.
- G√®re les erreurs et log les exceptions en cas d'√©chec.
"""
import os
import numpy as np
import pandas as pd
import mlflow
import streamlit as st
import psutil
import time
from dotenv import load_dotenv
from utils import configure_google_credentials, local_css, preprocess_data
from utils import send_log_to_elastic, get_system_usage
from elasticsearch import Elasticsearch
from datetime import datetime


load_dotenv()
local_css("styles.css")
configure_google_credentials()


def load_model():
    """
    Charge le mod√®le MLflow pour la pr√©diction.

    Retourne:
        Un mod√®le MLflow charg√©.
    """
    logged_model = 'runs:/b1b9458f76a245e192fca44a3c1d22cc/best_estimator'
    return mlflow.pyfunc.load_model(logged_model)

def show_prediction_meteo():
    """
    Affiche le formulaire de pr√©diction m√©t√©o avec MLflow int√©gr√© pour la pr√©diction √©nerg√©tique.
    """
    st.markdown("<br>", unsafe_allow_html=True)
    st.title("üå¶Ô∏è Pr√©diction d'√©nergie consomm√©e")
    st.markdown("<br>", unsafe_allow_html=True)
    st.write("Dans cette section, nous faisons la pr√©diction en prenant en compte des conditions m√©t√©orologiques.")
    st.markdown("<br>", unsafe_allow_html=True)
    st.markdown("<br>", unsafe_allow_html=True)

    # Mise en page avec colonnes
    col1, col2 = st.columns(2)

    with col1:
        temp_max = st.number_input(
            "Temp√©rature Max (¬∞C)", min_value=-50.0, max_value=50.0, value=25.0
        )
        temp_min = st.number_input(
            "Temp√©rature Min (¬∞C)", min_value=-50.0, max_value=50.0, value=15.0
        )
        wind_speed = st.number_input(
            "Vitesse du vent (km/h)", min_value=0, max_value=200, value=10
        )

    with col2:
        humidity = st.number_input("Humidit√© (%)", min_value=0, max_value=100, value=50)
        visibility = st.number_input(
            "Visibilit√© (km)", min_value=0, max_value=50, value=10
        )
        cloud_coverage = st.slider("Couverture Nuageuse (%)", 0, 100, 50)

    # Log des donn√©es d'entr√©e utilisateur
    log_data = {
        "timestamp": datetime.utcnow().isoformat(),
        "event": "prediction_input",
        "temp_max": temp_max,
        "temp_min": temp_min,
        "wind_speed": wind_speed,
        "humidity": humidity,
        "visibility": visibility,
        "cloud_coverage": cloud_coverage,
        "log_level": "INFO"
    }
    send_log_to_elastic(log_data)

    # Bouton de pr√©diction
    if st.button("üîç Pr√©dire la Consommation √ânerg√©tique"):
        try:
            with st.spinner("Chargement du mod√®le et pr√©diction en cours..."):
                model = load_model()

                # Pr√©parer les donn√©es pour la pr√©diction
                input_data = pd.DataFrame({
                    'TempMax_Deg': [temp_max],
                    'TempMin_Deg': [temp_min],
                    'Wind_kmh': [wind_speed],
                    'Wet_percent': [humidity],
                    'Visibility_km': [visibility],
                    'CloudCoverage_percent': [cloud_coverage]
                })

                input_data = input_data.astype(float)

                # Faire la pr√©diction via le mod√®le MLflow
                prediction = model.predict(input_data)
                st.success(f"La consommation √©nerg√©tique pr√©vue est de {prediction[0]:.2f} MWh")

                # R√©cup√©rer les informations syst√®me
                cpu_usage, memory_usage = get_system_usage()

                # Log du r√©sultat de la pr√©diction avec les inputs utilisateur
                log_data.update({
                    "event": "model_execution",
                    "model_name": "BestEstimator",
                    "model_version": "1.0.0",
                    "status": "completed",
                    "cpu_usage": cpu_usage,
                    "memory_usage": memory_usage,
                    "details": {
                        "predicted_energy": prediction[0],
                        "inputs": {
                            "temp_max": temp_max,
                            "temp_min": temp_min,
                            "wind_speed": wind_speed,
                            "humidity": humidity,
                            "visibility": visibility,
                            "cloud_coverage": cloud_coverage
                        }
                    },
                    "log_level": "INFO"
                })

        except Exception as e:
            # En cas d'erreur, d√©finir les valeurs par d√©faut pour √©viter l'UnboundLocalError
            cpu_usage, memory_usage = 0, 0

            # Log en cas d'erreur
            log_data.update({
                "event": "model_execution",
                "model_name": "BestEstimator",
                "model_version": "1.0.0",
                "status": "failed",
                "error_message": str(e),
                "error_type": type(e).__name__,
                "cpu_usage": cpu_usage,
                "memory_usage": memory_usage,
                "log_level": "ERROR"
            })

        send_log_to_elastic(log_data)

