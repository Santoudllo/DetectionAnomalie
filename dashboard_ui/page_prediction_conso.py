"""
Module pour la pr√©diction de la consommation journali√®re d'√©nergie avec mouvements sociaux.
Il permet d'utiliser un mod√®le MLflow pour faire des pr√©dictions bas√©es sur les caract√©ristiques
fournies par l'utilisateur.
"""

import os

import mlflow
import pandas as pd
import streamlit as st
from datetime import datetime
from utils import configure_google_credentials, local_css

local_css("styles.css")
configure_google_credentials()


# Charger le jeu de donn√©es
df = pd.read_csv("fusion_courbe_mouvement.csv", delimiter=";", encoding="utf-8")
df.columns = df.columns.str.strip()

# Feature engineering
df["mois"] = pd.to_datetime(df["date"], format="%d/%m/%Y").dt.month
df["jour_semaine"] = pd.to_datetime(df["date"], format="%d/%m/%Y").dt.dayofweek
df["moyenne_conso_horaire"] = df[
    [
        "00:00",
        "01:00",
        "02:00",
        "03:00",
        "04:00",
        "05:00",
        "06:00",
        "07:00",
        "08:00",
        "09:00",
        "10:00",
        "11:00",
        "12:00",
        "13:00",
        "14:00",
        "15:00",
        "16:00",
        "17:00",
        "18:00",
        "19:00",
        "20:00",
        "21:00",
        "22:00",
        "23:00",
    ]
].mean(axis=1)

# Nettoyage des donn√©es
df_clean = df.dropna(subset=["Consommation_journaliere"])


def load_model():
    """
    Charge le mod√®le MLflow pour la pr√©diction de la consommation.

    Returns:
        Un mod√®le MLflow charg√©.
    """
    logged_model = "runs:/df3f426ffdc248cdb89089905b2bf8ad/random_forest_model"
    return mlflow.pyfunc.load_model(logged_model)


def show_prediction_conso():
    """
    Affiche la page de pr√©diction de la consommation journali√®re avec mouvements sociaux.
    """
    st.markdown("<br>", unsafe_allow_html=True)
    st.title("‚ö° Pr√©diction d'√©nergie consomm√©e ")
    st.markdown("<br>", unsafe_allow_html=True)
    st.write("Dans cette section, nous faisons la pr√©diction en prenant en compte les mouvements sociaux.")
    st.markdown("<br>", unsafe_allow_html=True)
    st.markdown("<br>", unsafe_allow_html=True)

    col1, col2 = st.columns(2)

    with col1:
        date_input = st.date_input("Choisissez une date", datetime.now())
        selected_month = date_input.month
        selected_day_of_week = date_input.weekday()
        st.markdown("<br>", unsafe_allow_html=True)
        region_input = st.selectbox(
            "Choisissez une r√©gion", df_clean["r√©gion"].unique()
        )

    with col2:
        social_movement_input = st.selectbox(
            "Y a-t-il un mouvement social ?", options=[0, 1]
        )
        st.markdown("<br>", unsafe_allow_html=True)
        moyenne_conso_horaire = st.number_input(
            "Entrez la plage horaire souhait√©e (0-23h59)",
            min_value=0.0,
            max_value=23.59,
            value=0.0,
        )

    st.markdown("<br>", unsafe_allow_html=True)
    st.markdown("<br>", unsafe_allow_html=True)

    if st.button("üîç Pr√©dire la Consommation"):
        with st.spinner("Pr√©diction en cours..."):
            model = load_model()
            input_data = pd.DataFrame(
                {
                    "r√©gion": [region_input],
                    "movement_social": [social_movement_input],
                    "mois": [selected_month],
                    "jour_semaine": [selected_day_of_week],
                    "moyenne_conso_horaire": [moyenne_conso_horaire],
                }
            )

            prediction = model.predict(input_data)
            st.success(f"Consommation journali√®re pr√©dite : {prediction[0]:.2f} kWh")

    st.image(
        "https://cdn-icons-png.flaticon.com/512/1146/1146884.png",
        width=100,
        caption="Pr√©diction Mouvements Sociaux",
    )
